# ==============================================================================
# Laravel 本番用 Dockerfile - Layer Cache 最適化版
# Multi-stage build で最適化 + aggressive caching
# ==============================================================================

# Build Stage: 依存関係インストール
FROM php:8.4-fpm-alpine AS builder

# 作業ディレクトリを設定
WORKDIR /var/www/html

# ==============================================================================
# レイヤー1: システムパッケージ（変更頻度：低）
# ==============================================================================
RUN apk add --no-cache \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    freetype-dev \
    libjpeg-turbo-dev \
    libzip-dev \
    icu-dev \
    oniguruma-dev \
    libwebp-dev \
    zlib-dev \
    # ビルドツール（実行時には不要）
    autoconf \
    g++ \
    make

# ==============================================================================
# レイヤー2: PHP拡張（変更頻度：極低）- 最も時間のかかるレイヤー
# ==============================================================================
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        intl \
        opcache \
    && docker-php-ext-enable opcache

# ==============================================================================
# レイヤー3: Composer（変更頻度：低）
# ==============================================================================
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# ==============================================================================
# レイヤー4: Composer依存関係（中程度の変更頻度）
# composer.json/lock ファイルのみ先にコピー → 依存関係が変わった時のみ再ビルド
# ==============================================================================
COPY --chown=www-data:www-data composer.json composer.lock ./

# Composer依存関係をインストール（本番用）
RUN composer install \
    --no-dev \
    --optimize-autoloader \
    --no-interaction \
    --prefer-dist \
    --no-scripts \
    --no-autoloader

# ==============================================================================
# レイヤー5: アプリケーションコード（高頻度変更）
# ==============================================================================
COPY --chown=www-data:www-data . /var/www/html

# ==============================================================================
# レイヤー6: Composer最終処理 + Laravel最適化
# ==============================================================================
RUN composer dump-autoload --optimize --no-dev

# Laravel最適化コマンド実行（堅牢なエラーハンドリング）
RUN set -e; \
    cp .env.example .env 2>/dev/null || echo "APP_KEY=" > .env; \
    php artisan key:generate --no-interaction 2>/dev/null || echo "Key generation skipped"; \
    php artisan config:cache 2>/dev/null || echo "Config cache failed - will be done at runtime"; \
    php artisan route:cache 2>/dev/null || echo "Route cache failed - will be done at runtime"; \
    php artisan view:cache 2>/dev/null || echo "View cache failed - will be done at runtime"; \
    rm -f .env

# ==============================================================================
# Production Stage: 実行環境
FROM php:8.4-fpm-alpine AS production

# メタデータ
LABEL maintainer="FukuPochi Team"
LABEL version="1.0.0"
LABEL description="FukuPochi Laravel Backend (Production)"

# 作業ディレクトリを設定
WORKDIR /var/www/html

# 本番用：最小限のパッケージのみインストール
RUN apk add --no-cache \
    curl \
    libpng \
    libxml2 \
    freetype \
    libjpeg-turbo \
    libzip \
    icu \
    oniguruma \
    libwebp \
    zlib \
    # 監視・デバッグ用ツール
    htop \
    mysql-client \
    # プロセス管理
    supervisor

# PHP拡張をbuilderステージからコピー
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/

# PHP-FPM設定ファイルをコピー
COPY docker/php/php.production.ini /usr/local/etc/php/php.ini
COPY docker/php/www.production.conf /usr/local/etc/php-fpm.d/www.conf

# Supervisor設定（バックグラウンドタスク用）
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# www-data ユーザーに切り替え用のディレクトリ作成
RUN mkdir -p /var/www/.composer && chown -R www-data:www-data /var/www

# ビルドステージからファイルをコピー
COPY --from=builder --chown=www-data:www-data /var/www/html /var/www/html

# ストレージとキャッシュディレクトリを作成
RUN mkdir -p storage/logs \
    && mkdir -p storage/framework/cache \
    && mkdir -p storage/framework/sessions \
    && mkdir -p storage/framework/views \
    && mkdir -p bootstrap/cache

# 権限を設定
RUN chown -R www-data:www-data storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# ヘルスチェック用スクリプト
COPY docker/php/healthcheck.php /var/www/html/healthcheck.php
RUN chmod +x /var/www/html/healthcheck.php

# www-data ユーザーに切り替え
USER www-data

# ポート9000を公開（PHP-FPM）
EXPOSE 9000

# ヘルスチェック
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD php /var/www/html/healthcheck.php || exit 1

# 起動コマンド：PHP-FPMを起動
CMD ["php-fpm"]

# ==============================================================================
# Multi-service variant (Supervisor使用)
FROM production AS supervisor

USER root

# Supervisorでサービス管理する場合
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]