# ==============================================================================
# FukuPochi 本番用 Nginx設定
# Laravel (PHP-FPM) + SvelteKit リバースプロキシ構成
# ==============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 最大ファイル記述子数
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ログ形式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    # 基本設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    server_tokens off;

    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # アップストリーム定義
    upstream laravel_backend {
        server backend:9000;
        keepalive 32;
    }

    upstream sveltekit_frontend {
        server frontend:3000;
        keepalive 32;
    }

    # HTTP → HTTPS リダイレクト
    server {
        listen 80;
        server_name _;
        
        # Let's Encrypt用
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # その他はHTTPSにリダイレクト
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS メインサーバー
    server {
        listen 443 ssl http2;
        server_name your-domain.com www.your-domain.com;

        # SSL設定
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozTLS:10m;
        ssl_session_tickets off;

        # SSL暗号化設定（Mozilla Modern）
        ssl_protocols TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # セキュリティヘッダー（HTTPS用追加）
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; frame-ancestors 'self';" always;

        # ルートは SvelteKit に転送
        location / {
            proxy_pass http://sveltekit_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # API は Laravel に転送
        location /api/ {
            try_files $uri $uri/ @laravel;
        }

        # Laravel 静的ファイル
        location /storage/ {
            alias /var/www/html/storage/app/public/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }

        # Laravel Backend（PHP-FPM）
        location @laravel {
            root /var/www/html/public;
            
            fastcgi_pass laravel_backend;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root/index.php;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            include fastcgi_params;
            
            # 追加のFastCGIパラメータ
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_param REQUEST_METHOD $request_method;
            fastcgi_param CONTENT_TYPE $content_type;
            fastcgi_param CONTENT_LENGTH $content_length;
            fastcgi_param HTTPS $https if_not_empty;
            
            # セキュリティ
            fastcgi_param PHP_VALUE "open_basedir=/var/www/html:/tmp";
            
            # タイムアウト設定
            fastcgi_connect_timeout 5s;
            fastcgi_send_timeout 60s;
            fastcgi_read_timeout 60s;
        }

        # 静的ファイルキャッシュ設定
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }

        # 隠しファイルへのアクセス拒否
        location ~ /\. {
            deny all;
        }

        # ヘルスチェックエンドポイント
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # robots.txt
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
    }

    # 本番用ステータスページ（オプション）
    server {
        listen 127.0.0.1:8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}